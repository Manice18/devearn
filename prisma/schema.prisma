// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                String             @id @default(cuid())
  name              String             @unique
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  bounties          Bounty[]
  bountySubmissions BountySubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Bounty {
  id           String             @id @default(cuid())
  title        String
  oneLiner     String
  description  String
  githubRepo   String
  githubIssue  String
  difficulty   Difficulty
  rewardAmount Int
  rewardToken  String
  isLive       Boolean            @default(false)
  completed    Boolean            @default(false)
  createdBy    String?
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions  BountySubmission[]

  createdAt DateTime @default(now())

  @@map("bounties")
}

model BountySubmission {
  id                String  @id @default(cuid())
  bountyId          String
  userId            String
  submissionDetails String
  isAccepted        Boolean @default(false)
  bounty            Bounty  @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("bounty_submissions")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
